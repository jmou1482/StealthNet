<?xml version="1.0" ?>
<!--
    Ant buildfile for ELEC5616 project.
    
    Joshua Spence (308216350)
    Adrian Wong
-->
<project name="ELEC5616" default="all" basedir=".">
	<!-- Path properties -->
	<property name="path.build"   value="build" />
	<property name="path.docs"    value="docs" />
	<property name="path.img"     value="img" />
    <property name="path.lib"     value="lib" />
	<property name="path.src"     value="src" />
	<property name="path.classes" value="${path.build}/classes" />
	<property name="path.jar"     value="${path.build}/jar" />
	
	<!-- File names -->
	<property name="file.jar"         value="${path.jar}/${ant.project.name}.jar" />
	<property name="file.jar.server"  value="${path.jar}/${ant.project.name}_server.jar" />
	<property name="file.jar.client"  value="${path.jar}/${ant.project.name}_client.jar" />
	<property name="file.tar.gz"      value="${ant.project.name}.tar.gz" />
	<property name="file.tar.gz.md5"  value="${ant.project.name}.tar.gz.md5" />
	<property name="file.tar.gz.sha1" value="${ant.project.name}.tar.gz.sha1" />
	
	<!-- Class properties -->
    <property name="class.client"  value="StealthNet.StealthNetClient" />
	<property name="class.server"  value="StealthNet.StealthNetServer" />
	<property name="class.main"    value="${class.client}" />
	<property name="class.package" value="StealthNet" />
	
	<!-- Compile properties -->
	<property name="compile.debug"              value="true" />
	<property name="compile.deprecation"        value="false" />
	<property name="compile.optimize"           value="true" />
	<property name="compile.jdk-version.source" value="1.5" />
	<property name="compile.jdk-version.target" value="1.5" />
	<property name="compile.includeantruntime"  value="false" />
	
	<!-- Classpath -->
	<path id="compile.classpath">
        <fileset dir="${basedir}">
        	<include name="${path.lib}/*.jar" />
    	</fileset>
    </path>
	
	<!-- see http://stackoverflow.com/questions/1821803/creating-a-bundle-jar-with-ant -->
	<pathconvert property="mf.classpath" pathsep=" ">
        <path refid="compile.classpath" />
        <mapper>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*.jar" to="lib/*.jar" />
            </chainedmapper>
        </mapper>
	</pathconvert>
	
	<!-- Default (main) target -->
    <target name="all" depends="info, compile, jar, javadoc" description="Main target" />
    	
	<!-- Information target -->
    <target name="info" description="Just prints information about the environment">
        <echo>Project base directory: '${basedir}'</echo>
    	<echo/>
    	<echo>OS name: ${os.name}</echo>
        <echo>OS architecture: ${os.arch}</echo>
    	<echo>OS version: ${os.version}</echo>
    	<echo/>
        <echo>JVM name: ${java.vm.name}</echo>
    	<echo>JVM vendor: ${java.vm.vendor}</echo>
		<echo>JVM version: ${java.vm.version}</echo>
		<echo/>
		<echo>JRE vendor: ${java.vendor}</echo>
        <echo>JRE version: ${java.version}</echo>
    </target>
  
	<!-- Compilation target -->
    <target name="compile" description="Compilation target">
    	<!-- Make output directory -->
    	<mkdir dir="${path.classes}" />
    	
    	 <!-- Compile Java classes as necessary -->
        <javac            srcdir="${path.src}" 
        	             destdir="${path.classes}" 
    	                   debug="${compile.debug}"
        	         deprecation="${compile.deprecation}"
        	            optimize="${compile.optimize}"
        	   includeantruntime="${compile.includeantruntime}"
    	                  source="${compile.jdk-version.source}"
    	                  target="${compile.jdk-version.target}">
        	<classpath refid="compile.classpath" />
    	</javac>
    </target>
  
	<!-- JAR target -->
    <target name="jar" depends="compile" description="Compression target">
    	<mkdir dir="${path.jar}" />
    	<tstamp>
	        <format property="TODAY" pattern="dd/MM/yy HH:mm:ss" />
	    </tstamp>
    	
    	<!-- Main JAR file -->
        <jar destfile="${file.jar}" basedir="${path.classes}">
            <zipgroupfileset dir="${path.lib}" includes="*.jar" />
            <fileset dir=".">
                  <include name="${path.img}/*" />
            </fileset>
            
            <manifest>
                <attribute name="Built-By"   value="${user.name}" />
                <attribute name="Built-Date" value="${TODAY}" />
                <attribute name="Main-Class" value="${class.main}" />
                <attribute name="Class-Path" value="${compile.classpath}" />
            </manifest>
        </jar>
    	
    	<!-- Server JAR file -->
        <jar destfile="${file.jar.server}">
        	<zipgroupfileset dir="${path.lib}" includes="*.jar" />
        	<fileset dir="${path.classes}">
        		<!-- Must list the files to be included in the server JAR file here!!! -->
		        <include name="*/StealthNetServer**" />
		  	    <include name="*/StealthNetServerThread**" />
		  	    <include name="*/StealthNetComms**" />
		  	    <include name="*/StealthNetPacket**" />
    		</fileset>
        	
        	<manifest>
        		<attribute name="Built-By"   value="${user.name}" />
        		<attribute name="Built-Date" value="${TODAY}" />
                <attribute name="Main-Class" value="${class.server}" />
        		<attribute name="Class-Path" value="${compile.classpath}" />
        	</manifest>
    	</jar>
    	
    	<!-- Client JAR file -->
        <jar destfile="${file.jar.client}">
            <zipgroupfileset dir="${path.lib}" includes="*.jar" />
            <fileset dir=".">
                  <include name="${path.img}/*" />
            </fileset>
        	<fileset dir="${path.classes}">
        		<!-- Must list the files to be included in the client JAR file here!!! -->
                <include name="*/StealthNetClient**" />
                <include name="*/StealthNetComms**" />
                <include name="*/StealthNetPacket**" />
          	    <include name="*/StealthNetFileTransfer**" />
          	    <include name="*/StealthNetChat**" />
            </fileset>
        	
            <manifest>
                <attribute name="Built-By"   value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Main-Class" value="${class.client}"/>
                <attribute name="Class-Path" value="${compile.classpath}"/>
            </manifest>
        </jar>
    </target>
	
	<!-- javadoc target -->
	<target name="javadoc" depends="compile" description="Create Javadoc API documentation">
	    <!-- Make the output directory -->
		<mkdir dir="${path.docs}" />
		
		<!-- Generate javadoc -->
	    <javadoc sourcepath="${path.src}"
	                destdir="${path.docs}"
	           packagenames="*"
    	           doctitle="${component.title}"
    	             author="true" 
    	             bottom="${component.title}" 
    	             source="${compile.jdk-version.source}"  
    	             access="protected"
                    version="true" 
    	        windowtitle="${component.title} (Version ${component.version})">
	        <classpath refid="compile.classpath" />
	    </javadoc>
	</target>
	
	<!-- Clean target -->
	<target name="clean" description="Clean the project">
        <delete dir="${path.build}" />
		<delete dir="${path.docs}" />
		<delete file="${file.tar.gz}" />
		<delete file="${file.tar.gz.md5}" />
		<delete file="${file.tar.gz.sha1}" />
    </target>
	
	<!-- Run target -->
	<target name="run" depends="run_server, run_client, run_client2" description="Run a single StealthNet server and two clients" />
	
	<!-- Run client target -->
	<target name="run_client" depends="compile, jar" description="Run StealthNet client">
		<java jar="${file.jar.client}" spawn="true" fork="true">
            <classpath>
                <path refid="compile.classpath" />
                <path location="${file.jar}" />
            </classpath>
        </java>
	</target>
	
	<!-- Run a second client instance -->
	<target name="run_client2" depends="compile, jar" description="A copy of 'run_client' to allow running a second client instance">
		<java jar="${file.jar.client}" spawn="true" fork="true">
            <classpath>
                <path refid="compile.classpath" />
                <path location="${file.jar}" />
            </classpath>
        </java>
	</target>
	
	<!-- Run server target -->
	<target name="run_server" depends="compile, jar" description="Run StealthNet server">
		<java jar="${file.jar.server}" spawn="true" fork="true">
            <classpath>
                <path refid="compile.classpath" />
                <path location="${file.jar}" />
            </classpath>
        </java>
    </target>
	
	<!-- Default TAR target -->
	<target name="tar" depends="minimal-tar" description="Create a tar archive" />
    	
	<!-- Create a TAR file with all of the relevant content (excludes Eclipse files and git metadata) -->
	<target name="minimal-tar" depends="compile, jar, javadoc" description="Create a minimal tar archive">
		<!-- Delete old TAR file -->
		<delete file="${file.tar.gz}" />
		<delete file="${file.tar.gz.md5}" />
		<delete file="${file.tar.gz.sha1}" />
		
    	<tar destfile="${file.tar.gz}" longfile="gnu" compression="gzip">
            <tarfileset dir="${basedir}">
            	<!-- Exclude unnecessary files that can be built -->
            	<!-- TODO: this doesn't work -->
            	<exclude name="${path.build}/*" />
                <exclude name="${path.docs}/*" />
                
            	<!-- git metadata -->
            	<exclude name=".git" />
            	<exclude name=".gitignore" />
            	
            	<!-- Eclipse files -->
            	<exclude name=".classpath" />
            	<exclude name=".project" />
            	<exclude name=".settings" />
            </tarfileset>
        </tar>
        <checksum file="${file.tar.gz}" algorithm="md5" />
        <checksum file="${file.tar.gz}" algorithm="sha1" />
	</target>
	
	<!-- Create a TAR file with all of the relevant content (includes Eclipse files but excludes git metadata) -->
    <target name="maximal-tar" depends="compile, jar, javadoc" description="Create a tar archive">
    	<!-- Delete old TAR file -->
        <delete file="${file.tar.gz}" />
        <delete file="${file.tar.gz.md5}" />
        <delete file="${file.tar.gz.sha1}" />
    	
    	<tar destfile="${file.tar.gz}" longfile="gnu" compression="gzip">
            <tarfileset dir="${basedir}">
            	<!-- Exclude unnecessary files that can be built -->
            	<!-- TODO: this doesn't work -->
                <exclude name="${path.build}/*" />
                <exclude name="${path.docs}/*" />
                
                <!-- git metadata -->
                <exclude name=".git" />
                <exclude name=".gitignore" />
            </tarfileset>
        </tar>
        <checksum file="${file.tar.gz}" algorithm="md5" />
        <checksum file="${file.tar.gz}" algorithm="sha1" />
    </target>
	
	<!-- Print the classpath -->
    <target name="classpath" description="Print the classpath">
    	<!-- TODO: this doesn't work -->
	    <echo message="${compile.classpath}" />
	</target>
	
	<target name="jar_dir" description="Print the directory that the JARs are stored in">
		<!-- TODO: this doesn't work -->
		<echo message="${path.jar" />
	</target>
</project>
