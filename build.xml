<?xml version="1.0" ?>
<!--
    Ant buildfile for ELEC5616 project.
    
    Joshua Spence (308216350)
    Ahamad
-->
<project name="ELEC5616" default="all" basedir=".">
	<!-- Use ant-contrib -->
	<!-- see http://http://ant-contrib.sourceforge.net/ -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	    <classpath>
	        <pathelement location="lib/ant-contrib-0.6.jar" />
	    </classpath>
	</taskdef>
	
	<!-- =========================== MAIN TARGETS ========================== -->
    <!-- Main target -->
    <target name="all" depends="-init, info, compile, jar, javadoc, tar" description="Main target" />
    
    <!-- Main target with verbose output -->
    <target name="all-verbose" depends="-set-verbose, -init, info, compile, jar, javadoc, tar" description="Main target with verbose output" />
    
    <!-- Debug target -->
    <target name="all-debug" depends="-set-debug, -init, info, compile, jar, javadoc, tar" description="Debug target" />
    
    <!-- Debug target with verbose output -->
    <target name="all-debug-verbose" depends="-set-verbose, -set-debug, -init, info, compile, jar, javadoc, tar" description="Debug target with verbose output" />
    <!-- =================================================================== -->
	
	<!-- ====================== INITIALISATION TARGETS ===================== -->	
	<!-- Turn verbosity on -->
	<target name="-set-verbose">
	   <property name="global.verbose" value="true" />
	</target>
	
	<!-- Turn debug on -->
    <target name="-set-debug">
       <property name="global.debug" value="true" />
    </target>
	
	<!-- Main initialisation target -->
	<target name="-init">
		<!-- Set verbose (if not already set) -->
		<condition property="global.verbose" value="false">
		    <not>  
		        <isset property="global.verbose" />
		     </not>
		</condition>
		
		<!-- Set debug (if not already set) -->
		<condition property="global.debug" value="false">
		   <not>  
		      <isset property="global.debug" />
		   </not>
		</condition>
			
	    <!-- Initialise path properties -->
    	<property name="path.build"   value="build" />
    	<property name="path.docs"    value="docs" />
        <property name="path.img"     value="img" />
        <property name="path.lib"     value="lib" />
        <property name="path.src"     value="src" />
        <property name="path.classes" value="${path.build}/classes" />
        <property name="path.jar"     value="${path.build}/jar" />
		
		<if>
			<equals arg1="${global.verbose}" arg2="true" />
			<then>
        	    <echo>Build path:             ${path.build}</echo>
        		<echo>Docs path:              ${path.docs}</echo>
        	    <echo>Image path:             ${path.img}</echo>
        		<echo>Library path:           ${path.lib}</echo>
        		<echo>Source path:            ${path.src}</echo>
        		<echo>Class output path:      ${path.classes}</echo>
        		<echo>JAR output path:        ${path.jar}</echo>
				<echo />
			  </then>
		</if>
		
	    <!-- Initialise file names -->
    	<property name="file.jar"         value="${path.jar}/${ant.project.name}.jar" />
		<property name="file.jar.server"  value="${path.jar}/${ant.project.name}_server.jar" />
    	<property name="file.jar.client"  value="${path.jar}/${ant.project.name}_client.jar" />
    	<property name="file.tar.gz"      value="${ant.project.name}.tar.gz" />
    	<property name="file.tar.gz.md5"  value="${ant.project.name}.tar.gz.md5" />
    	<property name="file.tar.gz.sha1" value="${ant.project.name}.tar.gz.sha1" />
	
		<if>
            <equals arg1="${global.verbose}" arg2="true" />
            <then>
                <echo>Main JAR file:          ${file.jar}</echo>
                <echo>Server JAR file:        ${file.jar.server}</echo>	
        		<echo>Client JAR file:        ${file.jar.client}</echo>
        		<echo>GZIPed TAR file:        ${file.tar.gz}</echo>
            	<echo>TAR MD5 hash file:      ${file.tar.gz.md5}</echo>
        	    <echo>TAR SHA1 hash file:     ${file.tar.gz.sha1}</echo>
            	<echo />
    	    </then>
		</if>
		
	    <!-- Initialise class properties -->
        <property name="class.client"  value="StealthNet.StealthNetClient" />   <!-- Main class for the client JAR file -->
    	<property name="class.server"  value="StealthNet.StealthNetServer" />   <!-- Main class for the server JAR file -->
    	<property name="class.main"    value="${class.client}" />               <!-- Main class for the main JAR file -->
    	<property name="class.package" value="StealthNet" />                    <!-- Package name -->
	
		<if>
            <equals arg1="${global.verbose}" arg2="true" />
            <then>
        	    <echo>Client main class:      ${class.client}</echo>
            	<echo>Server main class:      ${class.server}</echo>
            	<echo>Main class:             ${class.main}</echo>
        		<echo>Package name:           ${class.package}</echo>
            	<echo />
			</then>
    	</if>
		
	    <!-- Initialise class debug -->
    	<!-- Enables debug messages within the source code -->
    	<property name="debug.StealthNetChat"         value="false" />
    	<property name="debug.StealthNetChecksum"     value="false" />
    	<property name="debug.StealthNetClient"       value="false" />
    	<property name="debug.StealthNetComms"        value="false" />
    	<property name="debug.StealthNetEncryption"   value="false" />
    	<property name="debug.StealthNetFileTransfer" value="false" />
    	<property name="debug.StealthNetIdentity"     value="false" />
    	<property name="debug.StealthNetPRNG"         value="false" />
    	<property name="debug.StealthNetServer"       value="false" />
        <property name="debug.StealthNetServerThread" value="false" />
		
	    <!-- Initialise compile properties -->
    	<property name="compile.debug"              value="${global.debug}" />          <!-- Outputs debug information with class files -->
        <property name="compile.debuglevel"         value="lines, vars, and source" />  <!-- Debugging information to output -->    
        <property name="compile.verbose"            value="${global.verbose}" />        <!-- Compiles with verbose output -->
        <property name="compile.deprecation"        value="false" />                    <!-- Compiles with deprecation information -->
        <property name="compile.optimize"           value="false" />                    <!-- Class file optimizations -->
        <property name="compile.jdk-version.source" value="1.5" />                      <!-- Whether to include the Ant run-time libraries in the classpath -->
        <property name="compile.jdk-version.target" value="1.5" />
        <property name="compile.includeantruntime"  value="false" />
	
		<if>
            <equals arg1="${global.verbose}" arg2="true" />
            <then>
        	    <echo>Debug compilation:      ${compile.debug}</echo>
        	    <echo>Debug level:            ${compile.debuglevel}</echo>
        	    <echo>Verbose compilation:    ${compile.verbose}</echo>
                <echo>Compile deprecation:    ${compile.deprecation}</echo>
                <echo>Optimized compilation:  ${compile.optimize}</echo>
                <echo>Source JDK version:     ${compile.jdk-version.source}</echo>
                <echo>Target JDK version:     ${compile.jdk-version.target}</echo>
                <echo>Include Ant runtime:    ${compile.includeantruntime}</echo>
            	<echo />
    	    </then>
		</if>
		
	    <!-- Initialise classpath -->
    	<path id="compile.classpath">
            <fileset dir="${basedir}">
            	<include name="${path.lib}/*.jar" />
        	</fileset>
        </path>
    	
    	<!-- see http://stackoverflow.com/questions/1821803/creating-a-bundle-jar-with-ant -->
    	<pathconvert property="mf.classpath" pathsep=" ">
            <path refid="compile.classpath" />
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.jar" to="lib/*.jar" />
                </chainedmapper>
            </mapper>
    	</pathconvert>
		
		<if>
            <equals arg1="${global.verbose}" arg2="true" />
            <then>
        		<property name="init.classpath" refid="compile.classpath" />
        		<echo>Classpath:              ${init.classpath}</echo>
        	</then>
    	</if>
	</target>
	<!-- =================================================================== -->
  
	<!-- Compilation target -->
    <target name="compile" description="Compilation target">
    	<!-- Make output directory -->
    	<mkdir dir="${path.classes}" />
    	
    	 <!-- Compile Java classes as necessary -->
        <javac            srcdir="${path.src}" 
        	             destdir="${path.classes}" 
    	                   debug="${compile.debug}"
        	         deprecation="${compile.deprecation}"
        	            optimize="${compile.optimize}"
        	   includeantruntime="${compile.includeantruntime}"
    	                  source="${compile.jdk-version.source}"
    	                  target="${compile.jdk-version.target}">
        	<classpath refid="compile.classpath" />
    	</javac>
    </target>
  
	<!-- JAR target -->
    <target name="jar" depends="compile" description="Compression target">
    	<mkdir dir="${path.jar}" />
    	<tstamp>
	        <format property="TODAY" pattern="dd/MM/yy HH:mm:ss" />
	    </tstamp>
    	
    	<!-- Main JAR file -->
        <jar destfile="${file.jar}" basedir="${path.classes}">
            <zipgroupfileset dir="${path.lib}" includes="*.jar" />
            <fileset dir=".">
                  <include name="${path.img}/*" />
            </fileset>
            
            <manifest>
                <attribute name="Built-By"   value="${user.name}" />
                <attribute name="Built-Date" value="${TODAY}" />
                <attribute name="Main-Class" value="${class.main}" />
                <attribute name="Class-Path" value="${compile.classpath}" />
            </manifest>
        </jar>
    	
    	<!-- Server JAR file -->
        <jar destfile="${file.jar.server}">
        	<zipgroupfileset dir="${path.lib}" includes="*.jar" />
        	<fileset dir="${path.classes}">
        		<!-- NOTE: Must list the files to be included in the server JAR file here!!! -->
		        <include name="*/StealthNetServer**" />
		  	    <include name="*/StealthNetServerThread**" />
        		
		  	    <include name="*/StealthNetComms**" />
        		<include name="*/StealthNetChecksum**" />
        		<include name="*/StealthNetEncryption**" />
                <include name="*/StealthNetIdentity**" />
		  	    <include name="*/StealthNetPacket**" />
        		<include name="*/StealthNetPRNG**" />
    		</fileset>
        	
        	<manifest>
        		<attribute name="Built-By"   value="${user.name}" />
        		<attribute name="Built-Date" value="${TODAY}" />
                <attribute name="Main-Class" value="${class.server}" />
        		<attribute name="Class-Path" value="${compile.classpath}" />
        	</manifest>
    	</jar>
    	
    	<!-- Client JAR file -->
        <jar destfile="${file.jar.client}">
            <zipgroupfileset dir="${path.lib}" includes="*.jar" />
            <fileset dir=".">
                  <include name="${path.img}/*" />
            </fileset>
        	<fileset dir="${path.classes}">
        		<!-- NOTE: Must list the files to be included in the client JAR file here!!! -->
                <include name="*/StealthNetClient**" />
        		
        		<include name="*/StealthNetChat**" />
        		<include name="*/StealthNetChecksum**" />
                <include name="*/StealthNetComms**" />
        		<include name="*/StealthNetEncryption**" />
        		<include name="*/StealthNetFileTransfer**" />
        		<include name="*/StealthNetIdentity**" />
                <include name="*/StealthNetPacket**" />
        		<include name="*/StealthNetPRNG**" />
            </fileset>
        	
            <manifest>
                <attribute name="Built-By"   value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Main-Class" value="${class.client}"/>
                <attribute name="Class-Path" value="${compile.classpath}"/>
            </manifest>
        </jar>
    </target>
	
	<!-- Javadoc target -->
	<target name="javadoc" depends="compile" description="Create Javadoc API documentation">
	    <!-- Make the output directory -->
		<mkdir dir="${path.docs}" />
		
		<!-- Generate javadoc -->
	    <javadoc sourcepath="${path.src}"
	                destdir="${path.docs}"
	           packagenames="*"
    	           doctitle="${component.title}"
    	             author="true" 
    	             bottom="${component.title}" 
    	             source="${compile.jdk-version.source}"  
    	             access="protected"
                    version="true" 
    	        windowtitle="${component.title} (Version ${component.version})">
	        <classpath refid="compile.classpath" />
	    </javadoc>
	</target>
	
	<!-- ========================== CLEAN TARGETS ========================== -->
	<!-- Clean target -->
	<target name="clean" depends="-init" description="Clean the project">
		<echo>Deleting ${path.build}.</echo>
        <delete dir="${path.build}" />
		
		<echo>Deleting ${path.docs}.</echo>
		<delete dir="${path.docs}" />
		
		<echo>Deleting ${file.tar.gz}.</echo>
		<delete file="${file.tar.gz}" />
		
		<echo>Deleting ${file.tar.gz.md5}.</echo>
		<delete file="${file.tar.gz.md5}" />
		
		<echo>Deleting ${file.tar.gz.sha1}.</echo>
		<delete file="${file.tar.gz.sha1}" />
    </target>
	
	<!-- Distribution clean target -->
    <target name="dist-clean" depends="-init" description="Clean the project">
    	<echo>Deleting ${path.build}.</echo>
        <delete dir="${path.build}" />
        
        <echo>Deleting ${path.docs}.</echo>
        <delete dir="${path.docs}" />
    </target>
	<!-- =================================================================== -->
	
	<!-- ======================== EXECUTION TARGETS ======================== -->
	<!-- Run target -->
	<target name="run" depends="run_server, run_client, -run_client2" description="Run a single StealthNet server and two clients" />
	
	<!-- Run client target -->
	<target name="run_client" depends="compile, jar" description="Run StealthNet client">
		<java jar="${file.jar.client}" spawn="true" fork="true">
            <classpath>
                <path refid="compile.classpath" />
                <path location="${file.jar}" />
            </classpath>
        </java>
	</target>
	
	<!-- Run a second client instance (exactly the same as the "run_client" target) -->
	<target name="-run_client2" depends="compile, jar">
		<echo>Running StealthNet client...</echo>
		<java jar="${file.jar.client}" spawn="true" fork="true">
            <classpath>
                <path refid="compile.classpath" />
                <path location="${file.jar}" />
            </classpath>
        </java>
	</target>
	
	<!-- Run server target -->
	<target name="run_server" depends="compile, jar" description="Run StealthNet server">
		<echo>Running StealthNet server...</echo>
		<echo>${debug.StealthNet.StealthNetChat}</echo>
		<java jar="${file.jar.server}" spawn="true" fork="true">
            <classpath>
                <path refid="compile.classpath" />
                <path location="${file.jar}" />
            </classpath>
			
			<sysproperty key="debug.StealthNet.StealthNetChat"         value="${debug.StealthNet.StealthNetChat}" />
		    <sysproperty key="debug.StealthNet.StealthNetClient"       value="${debug.StealthNet.StealthNetClient}" />
		    <sysproperty key="debug.StealthNet.StealthNetComms"        value="${debug.StealthNet.StealthNetComms}" />
		    <sysproperty key="debug.StealthNet.StealthNetFileTransfer" value="${debug.StealthNet.StealthNetFileTransfer}" />
		    <sysproperty key="debug.StealthNet.StealthNetServer"       value="${debug.StealthNet.StealthNetServer}" />
		    <sysproperty key="debug.StealthNet.StealthNetServerThread" value="${debug.StealthNet.StealthNetServerThread}" />
        </java>
    </target>
	<!-- =================================================================== -->
	
	<!-- =========================== TAR TARGETS ========================== -->
	<!-- Default TAR target -->
	<target name="tar" depends="maximal-tar" description="Create a tar archive" />
    	
	<!-- Create a TAR file with all of the relevant content (excludes Eclipse files, git metadata and any built files) -->
	<target name="minimal-tar" description="Create a minimal tar archive">
		<!-- Delete old TAR file -->
		<delete file="${file.tar.gz}" />
		<delete file="${file.tar.gz.md5}" />
		<delete file="${file.tar.gz.sha1}" />
		
    	<tar destfile="${file.tar.gz}" longfile="gnu" compression="gzip">
            <tarfileset dir="${basedir}">
            	<!-- Exclude unnecessary files that can be built -->
            	<exclude name="**/${path.build}/**" />
                <exclude name="**/${path.docs}/**" />
                
            	<!-- Exclude git metadata -->
            	<exclude name=".git" />
            	<exclude name=".gitignore" />
            	
            	<!-- Exclude Eclipse files -->
            	<exclude name=".classpath" />
            	<exclude name=".project" />
            	<exclude name=".settings" />
            </tarfileset>
        </tar>
        <checksum file="${file.tar.gz}" algorithm="md5" />
        <checksum file="${file.tar.gz}" algorithm="sha1" />
	</target>
	
	<!-- Create a TAR file with all of the relevant content (includes Eclipse files but excludes git metadata and any built files) -->
    <target name="normal-tar" description="Create a normal tar archive">
    	<!-- Delete old TAR file -->
        <delete file="${file.tar.gz}" />
        <delete file="${file.tar.gz.md5}" />
        <delete file="${file.tar.gz.sha1}" />
    	
    	<tar destfile="${file.tar.gz}" longfile="gnu" compression="gzip">
            <tarfileset dir="${basedir}">
            	<!-- Exclude unnecessary files that can be built -->
                <exclude name="**/${path.build}/**" />
                <exclude name="**/${path.docs}/**" />
                
                <!-- Exclude git metadata -->
                <exclude name=".git" />
                <exclude name=".gitignore" />
            </tarfileset>
        </tar>
        <checksum file="${file.tar.gz}" algorithm="md5" />
        <checksum file="${file.tar.gz}" algorithm="sha1" />
    </target>
	
	<!-- Create a TAR file with all of the relevant content (includes Eclipse files and any built files but excludes git metadata) -->
    <target name="maximal-tar" depends="compile, jar, javadoc" description="Create a maximal tar archive">
        <!-- Delete old TAR file -->
        <delete file="${file.tar.gz}" />
        <delete file="${file.tar.gz.md5}" />
        <delete file="${file.tar.gz.sha1}" />
        
        <tar destfile="${file.tar.gz}" longfile="gnu" compression="gzip">
            <tarfileset dir="${basedir}">
                <!-- Exclude git metadata -->
                <exclude name=".git" />
                <exclude name=".gitignore" />
            </tarfileset>
        </tar>
        <checksum file="${file.tar.gz}" algorithm="md5" />
        <checksum file="${file.tar.gz}" algorithm="sha1" />
    </target>
	<!-- =================================================================== -->
	
	<!-- ====================== INFORMATIONAL TARGETS ====================== -->
	<!-- Information target -->
    <target name="info" description="Just prints information about the environment">
        <echo>Project base directory: '${basedir}'</echo>
        <echo />
        <echo>OS name: ${os.name}</echo>
        <echo>OS architecture: ${os.arch}</echo>
        <echo>OS version: ${os.version}</echo>
        <echo />
        <echo>JVM name: ${java.vm.name}</echo>
        <echo>JVM vendor: ${java.vm.vendor}</echo>
        <echo>JVM version: ${java.vm.version}</echo>
        <echo />
        <echo>JRE vendor: ${java.vendor}</echo>
        <echo>JRE version: ${java.version}</echo>
    </target>
	
	<!-- Print the classpath -->
    <target name="classpath" depends="-init" description="Print the classpath">
    	<property name="print.classpath" refid="compile.classpath" />
	    <echo>Classpath: '${print.classpath}'</echo>
	</target>
	
	<!-- Print the directory where the JAR files are stored -->
	<target name="jar_dir" depends="-init" description="Print the directory that the JARs are stored in">
		<echo>JAR directory: '${path.jar}'</echo>
	</target>
	<!-- =================================================================== -->
</project>