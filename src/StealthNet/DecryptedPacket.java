/******************************************************************************
 * ELEC5616
 * Computer and Network Security, The University of Sydney
 * Copyright (C) 2002-2004, Matt Barrie, Stephen Gould and Ryan Junee
 *
 * PACKAGE:         StealthNet
 * FILENAME:        DecryptedPacket.java
 * AUTHORS:         Matt Barrie, Stephen Gould, Ryan Junee and Joshua Spence
 * DESCRIPTION:     Implementation of a StealthNet packet. This class represents
 * 					decrypted packet contents. This class is more closely based
 * 					on the original 'Packet' class than the EncryptedPacket
 * 					class.
 * VERSION:         2.0
 *
 *****************************************************************************/

package StealthNet;

/* Import Libraries **********************************************************/

import java.io.UnsupportedEncodingException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.management.InvalidAttributeValueException;

import StealthNet.Security.Encryption;
import StealthNet.Security.HashedMessageAuthenticationCode;
import StealthNet.Security.MessageAuthenticationCode;
import StealthNet.Security.TokenGenerator;

/* StealthNet.DecryptedPacket Class Definition *******************************/

/**
 * A class to store the decrypted data passed between StealthNet clients. A 
 * StealthNet "packet" consists of three parts:
 *     - command
 *     - data
 *     - token
 *  
 * A message token is generated by a pseudo-random random generator. The message 
 * token is used to prevent replay attacks, because once the packet is read at 
 * the receiving end of the communications, the token is "consumed" and cannot 
 * be used again for future communications. The Packet class WILL allow packets 
 * to be created without a token (if a null TokenGenerator instance is passed to
 * the function). A higher layer should check whether or not this should be 
 * allowed.
 * 
 * @author Matt Barrie
 * @author Stephen Gould
 * @author Ryan Junee
 * @author Joshua Spence
 */
public class DecryptedPacket {
	/** Commands. */
    public static final byte CMD_NULL = 0x00;
    public static final byte CMD_LOGIN = 0x01;
    public static final byte CMD_LOGOUT = 0x02;
    public static final byte CMD_MSG = 0x03;
    public static final byte CMD_CHAT = 0x04;
    public static final byte CMD_FTP = 0x05;
    public static final byte CMD_LIST = 0x06;
    public static final byte CMD_CREATESECRET = 0x07;
    public static final byte CMD_SECRETLIST = 0x08;
    public static final byte CMD_GETSECRET = 0x09;
    
    /** 
     * Security-specific commands - these should never be returned to a client 
     * or server, but rather should always be handled within the Comms class. 
     */
    public static final byte CMD_AUTHENTICATIONKEY = 0x0A;
    public static final byte CMD_INTEGRITYKEY = 0x0B;
    public static final byte CMD_TOKENSEED = 0x0C;
	
    /** A byte used to describe the Long token. */
    private static final byte TOKEN_NULL     = 0x00;
    private static final byte TOKEN_POSITIVE = 0x01;
    private static final byte TOKEN_NEGATIVE = 0x02;
    
    /** Hexadecimal characters. */
    private static final char[] HEXTABLE = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    /** Packet contents. */
    byte command;							/** The command being sent in the packet. */      
    final byte[] data;						/** The data being sent in the packet. */
    final Long token;						/** The pseudo-random token for this packet. */
    final MessageAuthenticationCode mac;	/** The MAC used to provide a message digest. */

    /** Null constructor with no digest and no token. */
    public DecryptedPacket() {
        this.command = DecryptedPacket.CMD_NULL;
        this.data = new byte[0];
        
        /** No token is available. */
        this.token = null;
        
        /** No MAC is available. */
        this.mac = null;
    }

    /** 
     * Constructor with no digest. Explicitly copies the data array contents.
     *
     * @param cmd The command to be sent in the packet.
     * @param d The data to be sent in the packet.
     */
    public DecryptedPacket(byte cmd, byte[] d) {
        this.command = cmd;
        
        if (d == null)
        	this.data = new byte[0];
        else {
        	this.data = new byte[d.length];
        	System.arraycopy(d, 0, this.data, 0, d.length);
        }
        
        /** No token is available. */
        this.token = null;
        
        /** No MAC is available. */
        this.mac = null;
    }
    
    /** 
     * Constructor with digest and token. Explicitly copies the data array 
     * contents.
     *
     * @param cmd The command to be sent in the packet.
     * @param dLen The length of the data array.
     * @param d The data to be sent in the packet.
     * @param mac The MessageAuthenticationCode instance to provide a MAC 
     * digest.
     * @param tokenGenerator The TokenGenerator instance to provide a token
     * number.
     */
    public DecryptedPacket(byte cmd, byte[] d, int dLen, MessageAuthenticationCode mac, TokenGenerator tokenGenerator) {
        this.command = cmd;
        
        /** Copy the data. */
        if (d == null)
        	this.data = new byte[0];
        else {
        	this.data = new byte[dLen];
        	System.arraycopy(d, 0, this.data, 0, dLen);
        }
        
        /** Create the token (if possible). */
        if (tokenGenerator != null)
        	this.token = new Long(tokenGenerator.getNext());
        else
        	this.token = null;
        
        this.mac = mac;
    }

    /** 
     * Constructor. This function must "undo" the effects of the toString() 
     * function, because this function converts the received data into a packet
     * at the receiving end of communications.
     * 
     * @param str A string consisting of the packet contents.
     */
    public DecryptedPacket(String str) {  
    	/** 
    	 * Add padding if necessary, to make the packet length an integer number
    	 * of bytes (each represented by 2 hexadecimal characters).
    	 */
    	if (str.length() % 2 == 1)
            str = "0" + str;
    	
        if (str.length() == 0) {
        	/** NULL packet. */
            this.command = DecryptedPacket.CMD_NULL;
            this.data = new byte[0];
            this.token = null;
            this.mac = null;
        } else {
        	/** Current index of the string. */
        	int current = 0;
        	
        	/** Command (1 byte). */
            this.command = (byte) (16 * singleHexToInt(str.charAt(current++)) + singleHexToInt(str.charAt(current++)));
            
            /** Data length (2 bytes). */
            int dataLen = hexToInt(str.substring(current, current + 8));
        	current += 8;
            
            /** Data (dataLen bytes). */
            this.data = new byte[dataLen];
            for (int i = 0; i < data.length; i++)
            	this.data[i] = (byte) (16 * singleHexToInt(str.charAt(current++)) + singleHexToInt(str.charAt(current++)));
            
            /** 
             * Token (8 bytes + 1 byte for sign).
             * 
             *  NOTE: I had issues here with encoding/decoding hexadecimal 
             *  strings to and from a negative long. My solution was to only
             *  encode positive longs in the packet output string, and to 
             *  indicate the sign of the long token using a single byte before
             *  the hexadecimal long.
             */
            final byte tokenProperties = (byte) (16 * singleHexToInt(str.charAt(current++)) + singleHexToInt(str.charAt(current++)));
    		switch (tokenProperties) {
	    		case TOKEN_NULL:
	    			this.token = null;
	    			break;
	    			
	    		case TOKEN_NEGATIVE:
	    			this.token = new Long(-1 * hexToLong(str.substring(current, current + 16)));
	    			break;
	    			
    			default:
    			case TOKEN_POSITIVE:
    				this.token = new Long(hexToLong(str.substring(current, current + 16)));
    		}
    		current += 16;
    		
    		/** No MAC is available. */
    		this.mac = null;
        }
    }

    /** 
     * Converts the packet to a string. This function must undo the effects of 
     * the StealthNet.DecryptedPacket(String) constructor, because this function
     * is used to convert a packet to a string for transmission at the sending 
     * end of communications.
     * 
     * @return A string representing the contents of the packet.
     */
    public String toString() {
    	String str = "";
        int lowHalfByte, highHalfByte;

        /** Command (1 byte).  */
        highHalfByte = (command >= 0) ? command : (256 + command);
        lowHalfByte = highHalfByte & 0xF;
        highHalfByte /= 16;
        str += HEXTABLE[highHalfByte];
        str += HEXTABLE[lowHalfByte];
        
        /** Data length (2 bytes). */
        str += intToHex(data.length);
        
        /** Data (dataLen bytes). */
        for (int i = 0; i < data.length; i++) {
        	highHalfByte = (data[i] >= 0) ? data[i] : 256 + data[i];
        	lowHalfByte = highHalfByte & 0xF;
            highHalfByte /= 16;
            str += HEXTABLE[highHalfByte];
            str += HEXTABLE[lowHalfByte];
        }
        
        /** Token (1 byte for properties + 8 bytes for value). */
        byte tokProp;
        long tokVal;
        if (token == null) {
        	tokProp = TOKEN_NULL; 
        	tokVal = 0L;
        } else {
        	if (token.longValue() < 0) {
        		tokProp = TOKEN_NEGATIVE; 
        		tokVal = -token.longValue();
        	} else {
        		tokProp = TOKEN_POSITIVE; 
        		tokVal = token.longValue();
        	}
        }
        /* Token property. */
        highHalfByte = (tokProp >= 0) ? tokProp : (256 + tokProp);
        lowHalfByte = highHalfByte & 0xF;
        highHalfByte /= 16;
        str += HEXTABLE[highHalfByte];
        str += HEXTABLE[lowHalfByte];
        /* Token value. */
        str += longToHex(tokVal);
        
        /** Done. */
        return str;
    }

    /** 
     * A utility function to convert a single hexadecimal character to a decimal
     * integer.
     * 
     * @param hex The hexadecimal character to convert to an integer.
     * @return The integer value of the hexadecimal character.
     */
    private static int singleHexToInt(char hex) {
             if ((hex >= '0') && (hex <= '9')) return (hex - '0');
        else if ((hex >= 'A') && (hex <= 'F')) return (hex - 'A' + 10);
        else if ((hex >= 'a') && (hex <= 'f')) return (hex - 'a' + 10);
        else return 0;
    }
    
    /**
     * Convert a hexadecimal string to a long.
     * 
     * @param hex The string to convert.
     * @return The long represented by the hexadecimal string.
     * @throws NumberFormatException
     */
    private static long hexToLong(String hex) throws NumberFormatException {
    	return Long.parseLong(hex, 16);
	}

    /**
     * Convert a long to a hexadecimal string. The length of the hexadecimal 
     * string will be equal to the length that would be required to encode
     * Long.MAX_VALUE as a hexadecimal string.
     * 
     * @param value The long to convert.
     * @return The hexadecimal string representing the long.
     */
	private static String longToHex(long value) {
		String result = Long.toHexString(value);
		
		/** Pad the result to use the full 8 bytes of a long. */
		while (result.length() < 16)
			result = "0" + result;
		
		return result;
	}
	
	/**
     * Convert a hexadecimal string to an integer.
     * 
     * @param hex The string to convert.
     * @return An integer representing the hexadecimal string.
     * @throws NumberFormatException
     */
	private static int hexToInt(String hex) throws NumberFormatException {
    	return Integer.parseInt(hex, 16);
	}
	
	/**
     * Convert an integer to a hexadecimal string. The length of the hexadecimal 
     * string will be equal to the length that would be required to encode
     * Integer.MAX_VALUE as a hexadecimal string.
     * 
     * @param value The integer to convert.
     * @return The hexadecimal string representing the integer.
     */
	private static String intToHex(int value) {
		String result = Integer.toHexString(value);
		
		/** Pad the result to use the full 4 bytes of an integer. */
		while (result.length() < 8)
			result = "0" + result;
		
		return result;
	}
    
    /**
     * Get the name of a command from its byte value. For debug purposes only.
     * 
     * @param command The byte value of the command to query the name of.
     * @return A String containing the name of the command.
     */
    public static String getCommandName(byte command) {
    	switch (command) {
    		case DecryptedPacket.CMD_NULL:
				return "CMD_NULL";
    		case DecryptedPacket.CMD_LOGIN:
    			return "CMD_LOGIN";
    		case DecryptedPacket.CMD_LOGOUT:
    			return "CMD_LOGOUT";
    		case DecryptedPacket.CMD_MSG:
				return "CMD_MSG";
    		case DecryptedPacket.CMD_CHAT:
    			return "CMD_CHAT";
    		case DecryptedPacket.CMD_FTP:
    			return "CMD_FTP";
    		case DecryptedPacket.CMD_LIST:
    			return "CMD_LIST";
    		case DecryptedPacket.CMD_CREATESECRET:
    			return "CMD_CREATESECRET";
    		case DecryptedPacket.CMD_SECRETLIST:
				return "CMD_SECRETLIST";
    		case DecryptedPacket.CMD_GETSECRET:
    			return "CMD_GETSECRET";
    		case DecryptedPacket.CMD_AUTHENTICATIONKEY:
				return "CMD_AUTHENTICATIONKEY";
    		case DecryptedPacket.CMD_INTEGRITYKEY:
				return "CMD_INTEGRITYKEY";
    		case DecryptedPacket.CMD_TOKENSEED:
    			return "CMD_TOKENSEED";
			default:
				return "UNKNOWN";
    	}
    }
    
    /**
     * Get a string representation of the packet. For debug purposes only. 
     * 
     * @return A comma-separated string containing the the value of each of the
     * packet's fields. For purely cosmetic purposes, newline characters will be
     * replaced by semicolons.
     */
    public String getDecodedString() {
    	String str = "";
    	
    	/** Packet name. */
    	str += getCommandName(command);
    	str += ", ";
    	
    	/** Packet data. */
    	if (data.length > 0)
    		str += (new String(data)).replaceAll("\n", ";");
    	else
    		str += "null";
    	str += ", ";
    	
    	/** Packet token. */
    	if (token != null)
    		str += token.toString();
    	else
    		str += "null";
    	
    	return str;
    }
    
    /**
     * Encrypt this packet.
     * 
     * @param e The encryption instance to encrypt the packet. If null, then it
     * will be assumed that the packet is not encrypted.
     * @return The encrypted packet.
     * 
     * @throws BadPaddingException 
     * @throws IllegalBlockSizeException 
     * @throws UnsupportedEncodingException 
     * @throws IllegalArgumentException 
     * @throws InvalidAttributeValueException 
     */
    public EncryptedPacket encrypt(Encryption e) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidAttributeValueException, IllegalArgumentException {
    	if (e != null) {
	    	final byte[] encryptedData = e.encrypt(this.toString()).getBytes();
	    	return new EncryptedPacket(encryptedData, encryptedData.length, HashedMessageAuthenticationCode.DIGEST_BYTES, this.mac);
    	} else {
    		return new EncryptedPacket(this.toString().getBytes(), this.toString().getBytes().length, HashedMessageAuthenticationCode.DIGEST_BYTES, this.mac);
    	}
    }
}

/******************************************************************************
 * END OF FILE:     DecryptedPacket.java
 *****************************************************************************/